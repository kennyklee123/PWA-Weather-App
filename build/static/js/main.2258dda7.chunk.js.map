{"version":3,"sources":["api/fetchWeather.js","App.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","temp","src","icon","alt","description","humidity","feels_like","pressure","wind","speed","deg","temp_min","temp_max","ReactDOM","render","document","getElementById"],"mappings":"iRAOaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAGHC,IAAMC,IARnB,kDAQ4B,CAChCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,WACPC,MAXI,sCAIY,uBAGjBC,EAHiB,EAGjBA,KAHiB,kBAUjBA,GAViB,2CAAH,sDCsDVC,G,MAvDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACRV,EADQ,KACFW,EADE,OAEeD,mBAAS,IAFxB,mBAERE,EAFQ,KAECC,EAFD,KAKRC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDAEE,UAAVc,EAAEC,IAFM,gCAGYjB,EAAaC,GAHzB,OAGDQ,EAHC,OAKPK,EAAWL,GACXG,EAAS,IANF,2CAAH,sDASZ,OACI,yBAAKM,UAAY,kBACb,2BACIC,KAAO,OACPD,UAAY,SACZE,YAAc,aACdC,MAASpB,EACTqB,SAAY,SAACN,GAAD,OAAOJ,EAASI,EAAEO,OAAOF,QACrCG,WAAcT,IAKjBF,EAAQY,MACL,yBAAKP,UAAY,QACb,wBAAIA,UAAY,aACZ,8BAAOL,EAAQa,MACf,6BAAMb,EAAQc,IAAIC,UAEtB,yBAAKV,UAAY,aACZL,EAAQY,KAAKI,KACd,uCAEJ,yBAAKX,UAAY,QACb,yBAAKA,UAAU,YAAYY,IAAG,4CAAuCjB,EAAQA,QAAQ,GAAGkB,KAA1D,WAAyEC,IAAKnB,EAAQA,QAAQ,GAAGoB,cAC/H,2BAAIpB,EAAQA,QAAQ,GAAGoB,aACvB,wCAAcpB,EAAQY,KAAKS,UAC3B,yCAAerB,EAAQY,KAAKU,WAA5B,SACA,wCAActB,EAAQY,KAAKW,SAA3B,QACA,oCAAUvB,EAAQwB,KAAKC,MAAvB,gBAA2CzB,EAAQwB,KAAKE,IAAxD,SACA,iEAAuC1B,EAAQY,KAAKe,SAApD,SACA,iEAAuC3B,EAAQY,KAAKgB,SAApD,cC9CxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2258dda7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\r\n\r\n//use an async function to fetch data\r\n//only paramter query is the name of the town we are searching for \r\nexport const fetchWeather = async (query) => {\r\n    //second paramter to our get request is our object of parameters\r\n    //we don't want the whole response, we just want the data hence why i use destructure\r\n    const {data} = await axios.get(URL, { \r\n        params: {\r\n            q: query, \r\n            units: 'imperial',\r\n            APPID: API_KEY\r\n        }\r\n    });\r\n    return data;\r\n}     ","import React, { useState } from 'react' ;\r\nimport { fetchWeather } from './api/fetchWeather';\r\nimport './App.css';\r\n\r\n//value needs to be something in the state\r\n//onChange has to be something coming from the state \r\nconst App = () => {\r\n    const[query,setQuery] = useState(''); \r\n    const[weather, setWeather] = useState({});//{} means an empty object\r\n\r\n    //an async function to search\r\n    const search = async (e) => {\r\n        //handling the event where the pressed key is enter which makes a search\r\n        if(e.key === 'Enter'){\r\n            const data = await fetchWeather(query) \r\n           // console.log(data);\r\n            setWeather(data); //setweather = data we have received\r\n            setQuery('');//resets the query string after they hit enter\r\n        }\r\n    }\r\n    return (\r\n        <div className = \"main-container\">\r\n            <input\r\n                type = \"text\"\r\n                className = \"search\"\r\n                placeholder = \"Search ...\"\r\n                value = {query} \r\n                onChange = {(e) => setQuery(e.target.value)}\r\n                onKeyPress = {search}\r\n            />\r\n            {/*If weather.main exists then it will return the react component in the ( ) part, thats what the && does, if it doesnt exist it doesnt makea the component\r\n               I have the country super scripped(on top) of the city\r\n             */}\r\n            {weather.main && (\r\n                <div className = \"city\">\r\n                    <h2 className = \"city-name\">\r\n                        <span>{weather.name}</span>\r\n                        <sup>{weather.sys.country}</sup>\r\n                    </h2>\r\n                    <div className = \"city-temp\">\r\n                        {weather.main.temp}\r\n                        <sup>&deg;F</sup>\r\n                    </div>\r\n                    <div className = \"info\">                    \r\n                        <img className=\"city-icon\" src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} alt={weather.weather[0].description}/>\r\n                        <p>{weather.weather[0].description}</p>\r\n                        <p>Humidity: {weather.main.humidity}</p>\r\n                        <p>Feels Like:{weather.main.feels_like}&deg;F</p>\r\n                        <p>Pressure: {weather.main.pressure} hPa</p>\r\n                        <p>Wind: {weather.wind.speed} coming from {weather.wind.deg}&deg;F</p>\r\n                        <p>Minimum temperature at the moment: {weather.main.temp_min}&deg;F</p>\r\n                        <p>Maximum temperature at the moment: {weather.main.temp_max}&deg;F</p>\r\n                    </div>\r\n                    {/*Improve by maybe desstructuring weather instead of doing weather.weight[0]\r\n                        the first item in weather is the description*/}\r\n                 \r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}